// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace ShoppingCart.Data
{

    // ReceiptLine
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.3.0")]
    public class ReceiptLineConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ReceiptLine>
    {
        public ReceiptLineConfiguration()
            : this("dbo")
        {
        }

        public ReceiptLineConfiguration(string schema)
        {
            ToTable("ReceiptLine", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Receiptid).HasColumnName(@"receiptid").HasColumnType("int").IsRequired();
            Property(x => x.Cost).HasColumnName(@"cost").HasColumnType("decimal").IsRequired().HasPrecision(12,2);
            Property(x => x.Department).HasColumnName(@"department").HasColumnType("int").IsOptional();
            Property(x => x.Description).HasColumnName(@"description").HasColumnType("nvarchar").IsRequired().HasMaxLength(65);
            Property(x => x.Gstamount).HasColumnName(@"gstamount").HasColumnType("decimal").IsOptional().HasPrecision(15,4);
            Property(x => x.Pstamount).HasColumnName(@"pstamount").HasColumnType("decimal").IsOptional().HasPrecision(15,4);
            Property(x => x.Qty).HasColumnName(@"qty").HasColumnType("int").IsRequired();
            Property(x => x.Retailprice).HasColumnName(@"retailprice").HasColumnType("decimal").IsOptional().HasPrecision(12,2);
            Property(x => x.Sellingprice).HasColumnName(@"sellingprice").HasColumnType("decimal").IsRequired().HasPrecision(12,2);
            Property(x => x.Expectedship).HasColumnName(@"expectedship").HasColumnType("datetime").IsOptional();
            Property(x => x.Shipqty).HasColumnName(@"shipqty").HasColumnType("int").IsOptional();
            Property(x => x.Sku).HasColumnName(@"sku").HasColumnType("int").IsRequired();
            Property(x => x.Color).HasColumnName(@"color").HasColumnType("nvarchar").IsOptional().HasMaxLength(5);
            Property(x => x.Size).HasColumnName(@"size").HasColumnType("nvarchar").IsOptional().HasMaxLength(15);
            Property(x => x.Subsize).HasColumnName(@"subsize").HasColumnType("nvarchar").IsOptional().HasMaxLength(15);
            Property(x => x.Shippingbasetax).HasColumnName(@"shippingbasetax").HasColumnType("decimal").IsRequired().HasPrecision(15,4);
            Property(x => x.Shippingpremiumtax).HasColumnName(@"shippingpremiumtax").HasColumnType("decimal").IsRequired().HasPrecision(15,4);
            Property(x => x.Shippingtaxamount).HasColumnName(@"shippingtaxamount").HasColumnType("decimal").IsRequired().HasPrecision(15,4);
            Property(x => x.Taxamount).HasColumnName(@"taxamount").HasColumnType("decimal").IsRequired().HasPrecision(15,4);
            Property(x => x.Taxtableid).HasColumnName(@"taxtableid").HasColumnType("int").IsRequired();
            Property(x => x.Trackingno).HasColumnName(@"trackingno").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.Flags).HasColumnName(@"flags").HasColumnType("nvarchar").IsRequired().HasMaxLength(15);
            Property(x => x.PersInfo).HasColumnName(@"pers_info").HasColumnType("nvarchar").IsOptional().HasMaxLength(254);
            Property(x => x.Parentlineno).HasColumnName(@"parentlineno").HasColumnType("int").IsOptional();
            Property(x => x.Shipdate).HasColumnName(@"shipdate").HasColumnType("datetime").IsOptional();
            Property(x => x.Productid).HasColumnName(@"productid").HasColumnType("int").IsRequired();
            Property(x => x.Dts).HasColumnName(@"dts").HasColumnType("datetime").IsOptional();
            Property(x => x.Discount).HasColumnName(@"discount").HasColumnType("decimal").IsRequired().HasPrecision(15,2);
            Property(x => x.SplitParentLineNo).HasColumnName(@"splitParentLineNo").HasColumnType("int").IsOptional();
            Property(x => x.LineType).HasColumnName(@"line_type").HasColumnType("char").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(1);
            Property(x => x.KitParentline).HasColumnName(@"kit_parentline").HasColumnType("int").IsRequired();

            // Foreign keys
            HasOptional(a => a.Department_Department).WithMany(b => b.ReceiptLines).HasForeignKey(c => c.Department).WillCascadeOnDelete(false); // FK_Department_ToReceiptLine
            HasRequired(a => a.Product).WithMany(b => b.ReceiptLines).HasForeignKey(c => c.Productid).WillCascadeOnDelete(false); // FK_Product_ToReceiptLine
            HasRequired(a => a.Receipt).WithMany(b => b.ReceiptLines).HasForeignKey(c => c.Receiptid).WillCascadeOnDelete(false); // FK_Receipt_ToReceiptLine
        }
    }

}
// </auto-generated>
