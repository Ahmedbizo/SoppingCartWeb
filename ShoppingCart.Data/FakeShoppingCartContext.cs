// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace ShoppingCart.Data
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.3.0")]
    public class FakeShoppingCartContext : IShoppingCartContext
    {
        public System.Data.Entity.DbSet<Class> Classes { get; set; }
        public System.Data.Entity.DbSet<Customer> Customers { get; set; }
        public System.Data.Entity.DbSet<Department> Departments { get; set; }
        public System.Data.Entity.DbSet<Manufacturer> Manufacturers { get; set; }
        public System.Data.Entity.DbSet<Product> Products { get; set; }
        public System.Data.Entity.DbSet<Receipt> Receipts { get; set; }
        public System.Data.Entity.DbSet<ReceiptLine> ReceiptLines { get; set; }
        public System.Data.Entity.DbSet<ShipAddress> ShipAddresses { get; set; }
        public System.Data.Entity.DbSet<ShipMethod> ShipMethods { get; set; }
        public System.Data.Entity.DbSet<Shiprate> Shiprates { get; set; }
        public System.Data.Entity.DbSet<ShoppingCartHeader> ShoppingCartHeaders { get; set; }
        public System.Data.Entity.DbSet<ShoppingCartLine> ShoppingCartLines { get; set; }
        public System.Data.Entity.DbSet<Sku> Skus { get; set; }
        public System.Data.Entity.DbSet<State> States { get; set; }
        public System.Data.Entity.DbSet<SubClass> SubClasses { get; set; }
        public System.Data.Entity.DbSet<Tax> Taxes { get; set; }
        public System.Data.Entity.DbSet<Taxrate> Taxrates { get; set; }

        public FakeShoppingCartContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            Classes = new FakeDbSet<Class>("Id");
            Customers = new FakeDbSet<Customer>("Id");
            Departments = new FakeDbSet<Department>("Id");
            Manufacturers = new FakeDbSet<Manufacturer>("Id");
            Products = new FakeDbSet<Product>("Id");
            Receipts = new FakeDbSet<Receipt>("Id");
            ReceiptLines = new FakeDbSet<ReceiptLine>("Id");
            ShipAddresses = new FakeDbSet<ShipAddress>("Id");
            ShipMethods = new FakeDbSet<ShipMethod>("Id");
            Shiprates = new FakeDbSet<Shiprate>("Id", "ShipMethodId", "Amount", "StartAmount", "EndAmount");
            ShoppingCartHeaders = new FakeDbSet<ShoppingCartHeader>("Id");
            ShoppingCartLines = new FakeDbSet<ShoppingCartLine>("Id");
            Skus = new FakeDbSet<Sku>("Id");
            States = new FakeDbSet<State>("Id");
            SubClasses = new FakeDbSet<SubClass>("Id");
            Taxes = new FakeDbSet<Tax>("Id");
            Taxrates = new FakeDbSet<Taxrate>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }
}
// </auto-generated>
