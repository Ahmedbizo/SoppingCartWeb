// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace ShoppingCart.Data
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.3.0")]
    public class ShoppingCartContext : System.Data.Entity.DbContext, IShoppingCartContext
    {
        public System.Data.Entity.DbSet<Class> Classes { get; set; } // Classes
        public System.Data.Entity.DbSet<Customer> Customers { get; set; } // Customers
        public System.Data.Entity.DbSet<Department> Departments { get; set; } // Departments
        public System.Data.Entity.DbSet<Manufacturer> Manufacturers { get; set; } // Manufacturers
        public System.Data.Entity.DbSet<Product> Products { get; set; } // Products
        public System.Data.Entity.DbSet<Receipt> Receipts { get; set; } // Receipts
        public System.Data.Entity.DbSet<ReceiptLine> ReceiptLines { get; set; } // ReceiptLine
        public System.Data.Entity.DbSet<ShipAddress> ShipAddresses { get; set; } // ShipAddresses
        public System.Data.Entity.DbSet<ShipMethod> ShipMethods { get; set; } // ShipMethods
        public System.Data.Entity.DbSet<Shiprate> Shiprates { get; set; } // shiprates
        public System.Data.Entity.DbSet<ShoppingCartHeader> ShoppingCartHeaders { get; set; } // ShoppingCartHeader
        public System.Data.Entity.DbSet<ShoppingCartLine> ShoppingCartLines { get; set; } // ShoppingCartLine
        public System.Data.Entity.DbSet<Sku> Skus { get; set; } // Skus
        public System.Data.Entity.DbSet<State> States { get; set; } // States
        public System.Data.Entity.DbSet<SubClass> SubClasses { get; set; } // SubClasses
        public System.Data.Entity.DbSet<Tax> Taxes { get; set; } // Taxes
        public System.Data.Entity.DbSet<Taxrate> Taxrates { get; set; } // Taxrates

        static ShoppingCartContext()
        {
            System.Data.Entity.Database.SetInitializer<ShoppingCartContext>(null);
        }

        public ShoppingCartContext()
            : base("Name=ShoppingCartContext")
        {
        }

        public ShoppingCartContext(string connectionString)
            : base(connectionString)
        {
        }

        public ShoppingCartContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public ShoppingCartContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public ShoppingCartContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        public ShoppingCartContext(System.Data.Entity.Core.Objects.ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new ClassConfiguration());
            modelBuilder.Configurations.Add(new CustomerConfiguration());
            modelBuilder.Configurations.Add(new DepartmentConfiguration());
            modelBuilder.Configurations.Add(new ManufacturerConfiguration());
            modelBuilder.Configurations.Add(new ProductConfiguration());
            modelBuilder.Configurations.Add(new ReceiptConfiguration());
            modelBuilder.Configurations.Add(new ReceiptLineConfiguration());
            modelBuilder.Configurations.Add(new ShipAddressConfiguration());
            modelBuilder.Configurations.Add(new ShipMethodConfiguration());
            modelBuilder.Configurations.Add(new ShiprateConfiguration());
            modelBuilder.Configurations.Add(new ShoppingCartHeaderConfiguration());
            modelBuilder.Configurations.Add(new ShoppingCartLineConfiguration());
            modelBuilder.Configurations.Add(new SkuConfiguration());
            modelBuilder.Configurations.Add(new StateConfiguration());
            modelBuilder.Configurations.Add(new SubClassConfiguration());
            modelBuilder.Configurations.Add(new TaxConfiguration());
            modelBuilder.Configurations.Add(new TaxrateConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ClassConfiguration(schema));
            modelBuilder.Configurations.Add(new CustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new DepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new ManufacturerConfiguration(schema));
            modelBuilder.Configurations.Add(new ProductConfiguration(schema));
            modelBuilder.Configurations.Add(new ReceiptConfiguration(schema));
            modelBuilder.Configurations.Add(new ReceiptLineConfiguration(schema));
            modelBuilder.Configurations.Add(new ShipAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new ShipMethodConfiguration(schema));
            modelBuilder.Configurations.Add(new ShiprateConfiguration(schema));
            modelBuilder.Configurations.Add(new ShoppingCartHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new ShoppingCartLineConfiguration(schema));
            modelBuilder.Configurations.Add(new SkuConfiguration(schema));
            modelBuilder.Configurations.Add(new StateConfiguration(schema));
            modelBuilder.Configurations.Add(new SubClassConfiguration(schema));
            modelBuilder.Configurations.Add(new TaxConfiguration(schema));
            modelBuilder.Configurations.Add(new TaxrateConfiguration(schema));
            return modelBuilder;
        }
    }
}
// </auto-generated>
