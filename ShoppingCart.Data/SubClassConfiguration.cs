// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace ShoppingCart.Data
{

    // SubClasses
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.3.0")]
    public class SubClassConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SubClass>
    {
        public SubClassConfiguration()
            : this("dbo")
        {
        }

        public SubClassConfiguration(string schema)
        {
            ToTable("SubClasses", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DepartmentId).HasColumnName(@"departmentId").HasColumnType("int").IsRequired();
            Property(x => x.ClassId).HasColumnName(@"classId").HasColumnType("int").IsRequired();
            Property(x => x.Name).HasColumnName(@"name").HasColumnType("nvarchar").IsOptional().HasMaxLength(40);
            Property(x => x.Web).HasColumnName(@"web").HasColumnType("int").IsOptional();
            Property(x => x.Description).HasColumnName(@"description").HasColumnType("text").IsOptional().IsUnicode(false).HasMaxLength(2147483647);
            Property(x => x.Pictureext).HasColumnName(@"pictureext").HasColumnType("char").IsOptional().IsFixedLength().IsUnicode(false).HasMaxLength(3);

            // Foreign keys
            HasRequired(a => a.Class).WithMany(b => b.SubClasses).HasForeignKey(c => c.ClassId).WillCascadeOnDelete(false); // FK_Class_ToSubClass
            HasRequired(a => a.Department).WithMany(b => b.SubClasses).HasForeignKey(c => c.DepartmentId).WillCascadeOnDelete(false); // FK_Departments_ToSubClass
        }
    }

}
// </auto-generated>
